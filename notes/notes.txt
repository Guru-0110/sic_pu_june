DAY 1 (June 23, 2025) - GitHub Setup and Basics

Made a GitHub account.

Clicked on the "+" icon in the top bar and chose "New repository".

Gave it a name, ticked "Add README", and created it.

Basically, made an online folder for our code.

Local Repo Stuff:

Local repo = copy of online (remote) repo on my PC.

To use Git, first linked my GitHub account to my PC (using git config).

Every time we push (upload) code, Git asks for login, so...

Created a PAT (Personal Access Token):

Profile > Settings > Developer Settings > Tokens (classic)

Created one with "No Expiry" and selected "repo" permissions.

Copied it and mailed it to myself (so I don’t lose it!).

DAY 2 (June 24, 2025) - Installations and Git Commands

Installed:

VS Code

Git

Notepad++

Python

Tip: Moved all installer files to a folder in C drive called "software".
Created another folder called "learning" in D drive for all course code.

Git Config:

git config --global user.name "your_name"

git config --global user.email "your_email"

Cloned Repo:

git clone <url>

OR use PAT like git clone https://<PAT>@github.com/username/repo

Git Push Flow:

git add .

git commit -m "message"

git push origin main

DAY 3 - Python Intro + Operators

Python syntax is super readable, feels like English.

Arithmetic Operators:

+, -, *, /, %, // (floor division), ** (power)

Operate left to right. Precedence: ** > *, /, %, // > +, -

Relational Operators:



, <, >=, <=, ==, !=

Return True or False

Logical Operators:

and, or, not

Short-circuiting: if first condition is False in 'and', Python doesn't check the second one.

Number Storage:

Positives: converted to binary directly.

Negatives: convert to binary and apply 2’s complement.

DAY 4 - Functions + Built-ins

Python functions are easy.

range() gives numbers in a range.

Other built-ins: input(), print(), len(), min(), max(), sorted()

DAY 5 - Lists

Python Lists:

Ordered and mutable (can change values).

Can hold mixed data types.

Lookup is fast (O(1)).

List Problems Solved:

Smallest and biggest elements.

Frequency of an element.

Remove duplicates.

Get next bigger number with same digits.

Kaprekar's constant recursion count (4-digit number).

Recursion Practice:

Factorial

Fibonacci

Sum of list elements

DAY 6 - Data Structures Using Lists

Stack Using List:

Add/remove from rear: append() and pop()

Or from front: insert(0, val) and pop(0)

Queue Using List:

Typical Queue: Insert rear, delete front.

Can also try: Insert front, delete rear.

DAY 7 - OOP in Python

OOP Concepts:

Inheritance: Derived class gets stuff from Base class.

Polymorphism: Same function name, different behavior.

Encapsulation: Grouping data + methods.

Abstraction: Hiding internal details.

Python Specifics:

Use _ for private variables.

super() calls methods from base class.

No function overloading in Python (because no compile time).

DAY 9 - Sorting (Bubble + Selection Sort)

Bubble Sort:

Compares adjacent elements and swaps if needed.

Repeats until list is sorted.

If no swaps in a pass, it’s already sorted.

Time complexity: Best case O(n), Worst case O(n^2)

Selection Sort:

Find the smallest in unsorted part and put it in the right place.

O(n^2), not very efficient.

Brute Force Technique:

No smart guesswork, just plain logic.

DAY 10 - Binary Search Tree (BST)

A tree where every left child is smaller than the node and right child is bigger.

Insertion always happens at a leaf.

Deletion:

No child → just remove it.

One child → link parent to child.

Two children → replace with smallest in right subtree.

DAY 11 - PDB Debugging (Python Debugger)

Helps stop code at certain lines and check what’s going on.

Use import pdb; pdb.set_trace() in the script.

Commands like:

n (next)

c (continue)

q (quit)

p var (print variable)

DAY 12 - NumPy Basics

Creating Arrays:

np.array([1, 2, 3])

np.zeros((2, 3)) → matrix of 0s

np.ones((3, 4)) → matrix of 1s

np.full((2, 2), 7) → all 7s

np.arange(1, 10) → range values

np.reshape() → change shape

Matrix Math:

+, -, *, / work element-wise

np.dot(a, b) for matrix multiplication

Shape & Indexing:

Use .shape to check size

2D arrays can be indexed with [row][col] or [row, col]

Broadcasting:

NumPy auto-expands scalars to match shape of arrays (e.g., add 5 to every element)

DAY 13 - NumPy Advanced

Random & Normalization:

np.random.random((3, 3)) → random values between 0 and 1

Normalize: (arr - mean) / std

Slicing:

arr[1:3, :] → rows 1 & 2, all columns

arr[:, [0, -1]] = 0 → make 1st & last column zero

DAY 14 - Function Pointers + Closures

Functions can return functions in Python.

def outer(): def inner(): return ...

Closures remember the enclosing variable.

Also saw how C-style function pointers look in Python.

DAY 15 - Pandas Basics

import pandas as pd

pd.Series() for 1D labeled data

pd.DataFrame() for 2D table-like data

Load CSV: pd.read_csv('file.csv')

Save CSV: df.to_csv('output.csv')

Useful Ops:

df.head(), df.tail(), df.info(), df.describe()

df['column'] to access a column

df.loc[], df.iloc[] for row access

DAY 16 - Regex in Python

import re

re.match(), re.search(), re.findall()

Patterns:

. = any char

* = 0 or more

+ = 1 or more

[] = match set

^ = starts with, $ = ends with

Example:

re.findall(r'\d+', 'abc123def456') → ['123', '456']

DAY 17 - Flask Basics

pip install flask

First app:

from flask import Flask
app = Flask(__name__)

@app.route('/')
def home():
    return 'Hello, Flask!'

app.run(debug=True)

Flask Notes:

@app.route() defines URL path

render_template() to return HTML

Flask auto-reloads with debug=True

Can pass data to HTML using Jinja2 templating


inheritence = it will inherit the complete SDLC of the parent to the child and can add the new
features if wanted in the child class
define = reusablity of the features , we use the existing feature to derive the new feature
and all the features are also added to the child class

Java = extend .

python = class1 inherits class2:
it is a type of " is - a " relationship
cutomer <- pro customer <- pro max customer

the relationship should be from the child to the parent

1) reusablity along with SDLC and policy
2) to override the existing featured
3) chil class is not an indivisual type
4) is-a relationship
5) parent class refernece to the child class but can not refer the newly added
feature of the child class ( as child class is bigger )
child -> parent is not true

even the parent members which are private they are the part of the child class too ,
so the members are not visible and so they can not be accessed until the public getter or the setter


uplift of the values to the parent from the child to parent can be done by the super key word
we have the parent most class called the object class in both python and the java
it has features , where all the classes must have these features
the super can be called defaultly form the interpretur 

how to create the private members in python ??
def __init__(self):
   self._head = None

so these are the points of the inheritence = we reuse the existing code amd also explain
the points in the inheritence and take the help of the parent and a child class 
explain that it also inherits the SDLC and also the private members can also be inherited
and explain about the parent most class = object class which have all the properties 
that should compulsorily be having these features

Idea + Implementation try it out!

why is pojo used 
initialize the object = to provide the data
reading the object = to read the data
setting the object = to modify the data  ; example here we can set the balance if we add
or remove the money


try using the hash code for the address

what does the object class have??
it gives the functionalities so we type @override and we override what we require 

---------------------------------------------------------------------------------

what is polymorphism?
in python there is no static polymorphism compile time polymorphism = 
there is no function overloading
Why?? = because there is no compile time and it is compile time binding so there is no
static polymorphism

---------------------------------------------------------------------------------

abstraction??
to hide the important detials and only display the things required 
example take the fan where the regulator is used and can be understood but the inner
implementation is not been specified or been hidden from the user
to give an easier way for the user to use the application = so it gives the user 
interface

1) hides the implementation
2) its purpose is to give the easier way to use the implementation

we can get the abstraction using emcapsulation 

--------------------------------------------------------------------------------
encapsulation = operations and the data are put together also known as binding 
we can use the encapsulation to get the abstraction 
so if one is there other must be there

example = a class 


--------------------------------------------------------------------------------
from the caller to callee it transfers then it is prologue

inside the callee() = it can either return the result or
it can acknowledege or 
it returns nothing 

epilogue = returning of the control from the callee function to the caller fucntion to the caller 
fucntion is called an epilogue

constructor call must be the first statement of the constructor

from the child class prologue it goes to parent class using the super keyword and
go to the parent class prologue and then it implements ( 3 things )/business logic
and again comes
back to the child class


even if the super is not written it will defualtly be there from the interpreter

----> do the object oriented programming for the brief reader

assignment = create a singleton class = where only one object created

what is a static members??
it can be shared by all but does not belong to a particular object
the value is outside the object and every object have its own members can also access
the static members

memory management diagram

code area
static segement 
static area ( frames )    - in C it uses a lot in static area  for python = 1
heap area (free section)  - the object are created here  python = 90

1:1 = C
1:5 = C++
1:9 = java
1:99 = python 

the static and heap area utilization from c , c++ , java and python

---------------------------------------------------------------------------------
Tree = it is a DS , it is a Non-linear data structures , it is acyclic DS( there must be no cycles
in the nodes and the starting point of the tree is root of the tree


file system = is a random tree 
Binary tree is a tree which has a max of 2 CHILD nodes for every possible node in the tree
atmost of 2

root node is said to be at the level 1 of the tree
its immediate child node is at the level 2 and so on..
so now the maximum possible level a tree can go is depth = that is height of the tree
In a binary tree of height N , we can have maximum of (2 power N)-1
and so we have odd number of nodes because = we are starting from the root node which is 
1

TRAVERSAL in a tree is when we move from the current node to one of the its 
immediate child

A tree with exactly or nearly 2^N-1 is said to be complete binary tree the 2 child nodes
of a node in a binary tree are said to be left and right child 
The tree we can traverse from the left child node is said to be left sub tree

complete Binary tree = 50% of the tree is cleaned from the search area
Strict Binary tree = if we have strictly 0 or 2 number of nodes 
left child lesser , right greater = BST
in a BST if the nodes are lesser than 2^n-1 then it is unbalanced BST
if Converse and balanced = Balacanced BST

if you traverse a binary tree , 
l-Root-R = Inorder
Root-l-R = pre-order
l-R-Root = post-order


A new node is always added into BST as = leaf Node 

delete a node from the BST:
1. node with 0 child
2. 2 child
3. 1 child

balancing a BST
self balancing BST 
Constructing a BST using 2 traversals 
CRUD operations 

